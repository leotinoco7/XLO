// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  name     String
  email    String  @unique
  password String
  CPF      String  @unique
  imageUrl String  @map("image_url")
  ranking  Int
  balance  Float
  isAdmin  Boolean @default(false) @map("is_admin")
  deck     Deck[]
  // deck     Deck?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  UserToCard UserToCard[]
  @@map("users")
}

// model Deck {
//   id String @id @default(uuid())

//   name         String
//   cardQuantity Int    @default(5) @map("card_quantity")
//   deckAttack   Int    @map("deck_attack")
//   deckDefense  Int    @map("deck_defense")
//   cards        Card[]
//   user         User   @relation(fields: [userId], references: [id])
//   userId       String @unique

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("decks")
// }

model Card {
  id String @id @default(uuid())

  name         String
  type         String
  cardAttack   Int        @map("card_attack")
  cardDef      Int        @map("card_def")
  rarity       String
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String     @map("collection_id")
  deck         Deck[]
  // decks        Deck[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  UserToCard UserToCard[]
  @@map("cards")
}

model Collection {
  id String @id @default(uuid())

  name       String
  packNumber Int    @map("pack_number")
  cardNumber Int    @map("card_number")
  packs      Pack[]
  cards      Card[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("collections")
}

model Pack {
  id String @id @default(uuid())

  cardQuantity Int        @default(5) @map("card_quantity")
  price        Float
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String     @map("collection_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("packs")
}

model Deck {
  id String @id @default(uuid())

  deckCard   DeckCard   @default(OUT) @map("deck_card")
  user       User       @relation(fields: [userId], references: [id])
  userId     String     @map("user_id")
  userToCard UserToCard @relation(fields: [utcId], references: [id])
  utcId      String     @map("card_id")


  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Card      Card?    @relation(fields: [cardId], references: [id])
  cardId    String?
  @@map("decks")
}

model UserToCard {
  id String @id @default(uuid())


  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")
  card   Card   @relation(fields: [cardId], references: [id])
  cardId String @map("card_id")


  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Deck      Deck[]
  @@map("user_to_card")
}

enum DeckCard {
  IN
  OUT
}
